/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Hamster } from "./Hamster";
import { HamsterCountArgs } from "./HamsterCountArgs";
import { HamsterFindManyArgs } from "./HamsterFindManyArgs";
import { HamsterFindUniqueArgs } from "./HamsterFindUniqueArgs";
import { CreateHamsterArgs } from "./CreateHamsterArgs";
import { UpdateHamsterArgs } from "./UpdateHamsterArgs";
import { DeleteHamsterArgs } from "./DeleteHamsterArgs";
import { BetFindManyArgs } from "../../bet/base/BetFindManyArgs";
import { Bet } from "../../bet/base/Bet";
import { HamsterService } from "../hamster.service";
@graphql.Resolver(() => Hamster)
export class HamsterResolverBase {
  constructor(protected readonly service: HamsterService) {}

  async _hamstersMeta(
    @graphql.Args() args: HamsterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Hamster])
  async hamsters(
    @graphql.Args() args: HamsterFindManyArgs
  ): Promise<Hamster[]> {
    return this.service.hamsters(args);
  }

  @graphql.Query(() => Hamster, { nullable: true })
  async hamster(
    @graphql.Args() args: HamsterFindUniqueArgs
  ): Promise<Hamster | null> {
    const result = await this.service.hamster(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Hamster)
  async createHamster(
    @graphql.Args() args: CreateHamsterArgs
  ): Promise<Hamster> {
    return await this.service.createHamster({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Hamster)
  async updateHamster(
    @graphql.Args() args: UpdateHamsterArgs
  ): Promise<Hamster | null> {
    try {
      return await this.service.updateHamster({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hamster)
  async deleteHamster(
    @graphql.Args() args: DeleteHamsterArgs
  ): Promise<Hamster | null> {
    try {
      return await this.service.deleteHamster(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Bet], { name: "bets" })
  async findBets(
    @graphql.Parent() parent: Hamster,
    @graphql.Args() args: BetFindManyArgs
  ): Promise<Bet[]> {
    const results = await this.service.findBets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
