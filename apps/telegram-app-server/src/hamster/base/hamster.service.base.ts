/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Hamster as PrismaHamster,
  Bet as PrismaBet,
} from "@prisma/client";

export class HamsterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HamsterCountArgs, "select">): Promise<number> {
    return this.prisma.hamster.count(args);
  }

  async hamsters(args: Prisma.HamsterFindManyArgs): Promise<PrismaHamster[]> {
    return this.prisma.hamster.findMany(args);
  }
  async hamster(
    args: Prisma.HamsterFindUniqueArgs
  ): Promise<PrismaHamster | null> {
    return this.prisma.hamster.findUnique(args);
  }
  async createHamster(args: Prisma.HamsterCreateArgs): Promise<PrismaHamster> {
    return this.prisma.hamster.create(args);
  }
  async updateHamster(args: Prisma.HamsterUpdateArgs): Promise<PrismaHamster> {
    return this.prisma.hamster.update(args);
  }
  async deleteHamster(args: Prisma.HamsterDeleteArgs): Promise<PrismaHamster> {
    return this.prisma.hamster.delete(args);
  }

  async findBets(
    parentId: string,
    args: Prisma.BetFindManyArgs
  ): Promise<PrismaBet[]> {
    return this.prisma.hamster
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bets(args);
  }
}
